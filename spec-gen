#!/usr/bin/env python
"""usage: %prog [options] input output

Post-process a document, adding cross-references, table of contents, etc.
"""

from optparse import OptionParser
import sys

from specGen import generator

def main():
	optParser = getOptParser()
	opts, args = optParser.parse_args()
	
	if len(args) >= 2:
		gen = generator.generator()
		input = file(args[0], "r")
		output = file(args[1], "w")
		kwargs = vars(opts)
		gen.process(input, output, **kwargs)
	else:
		sys.stderr.write("spec-gen expects two arguments. Use -h for help\n")
		sys.exit(1)

def getOptParser():
	parser = OptionParser(usage = __doc__)
	
	parser.add_option("-x", "--xml-input", action = "store_true",
		default = False, dest = "xml_input", help = "Use an XML parser to parse the input.")
	
	parser.add_option("", "--xml-output", action = "store_true",
		default = False, dest = "xml_output", help = "Serialize the output to XML.")

	parser.add_option("", "--strip-whitespace", action = "store_true",
		default = False, dest = "strip_whitespace", help = "strip whitespace")

	parser.add_option("", "--omit-optional-tags", action = "store_true",
		default = False, dest = "omit_optional_tags", help = "omit optional tags")

	parser.add_option("", "--quote-attr-values", action = "store_true",
		default = False, dest = "quote_attr_values", help = "quote attribute values")

	parser.add_option("", "--use-best-quote-char", action = "store_true",
		default = False, dest = "use_best_quote_char",	help = "use best quote character")

	parser.add_option("", "--no-minimize-boolean-attributes",
		action = "store_false", default = True,
		dest = "minimize_boolean_attributes", help = "minimize boolean attributes")

	parser.add_option("", "--use-trailing-solidus", action = "store_true",
		default = False, dest = "use_trailing_solidus", help = "use trailing solidus")

	parser.add_option("", "--space-before-trailing-solidus",
		action = "store_true", default = False,
		dest = "space_before_trailing_solidus", help = "add space before trailing solidus")

	parser.add_option("", "--escape-lt-in-attrs", action = "store_true",
		default = False, dest = "escape_lt_in_attrs", help = "escape less than signs in attribute values")

	parser.add_option("", "--escape-rcdata", action = "store_true",
		default = False, dest = "escape_rcdata", help = "escape rcdata element values")

	parser.add_option("", "--sanitize", action = "store_true", default = False,
		dest = "sanitize", help = "sanitize")

	return parser

if __name__ == "__main__":
	import cProfile, pstats, os
	cProfile.run('main()', "spec-gen.foobar.stat")
	stat = pstats.Stats("spec-gen.foobar.stat")
	stat.sort_stats("time")
	stat.print_stats()
	os.remove("spec-gen.foobar.stat")
	#main()